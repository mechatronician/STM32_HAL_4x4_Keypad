
STM32_4x4_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017f8  080017f8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080017f8  080017f8  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f8  080017f8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000003c  0800183c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800183c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035e9  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000efd  00000000  00000000  0002364e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000418  00000000  00000000  00024550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001260e  00000000  00000000  00024ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000410a  00000000  00000000  000372f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006400a  00000000  00000000  0003b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e20  00000000  00000000  0009f488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017bc 	.word	0x080017bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080017bc 	.word	0x080017bc

0800014c <keypad_init>:
extern KeypadTypeDef keypad;

KeypadGPIO_TypeDef keypad_gpio;
// Initialize Keypad columns/rows GPIO Ports and GPIO pins.
void keypad_init(GPIO_TypeDef** gpio_col, uint16_t* col_pin, GPIO_TypeDef** gpio_row, uint16_t* row_pin )
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	keypad_gpio.KeypadColumn1_Port = gpio_col[0];
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a21      	ldr	r2, [pc, #132]	; (80001e4 <keypad_init+0x98>)
 8000160:	6013      	str	r3, [r2, #0]
	keypad_gpio.KeypadColumn2_Port = gpio_col[1];
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	4a1f      	ldr	r2, [pc, #124]	; (80001e4 <keypad_init+0x98>)
 8000168:	6053      	str	r3, [r2, #4]
	keypad_gpio.KeypadColumn3_Port = gpio_col[2];
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	689b      	ldr	r3, [r3, #8]
 800016e:	4a1d      	ldr	r2, [pc, #116]	; (80001e4 <keypad_init+0x98>)
 8000170:	6093      	str	r3, [r2, #8]
	keypad_gpio.KeypadColumn4_Port = gpio_col[3];
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	68db      	ldr	r3, [r3, #12]
 8000176:	4a1b      	ldr	r2, [pc, #108]	; (80001e4 <keypad_init+0x98>)
 8000178:	60d3      	str	r3, [r2, #12]

	keypad_gpio.KeypadColumn1_Pin = col_pin[0];
 800017a:	68bb      	ldr	r3, [r7, #8]
 800017c:	881a      	ldrh	r2, [r3, #0]
 800017e:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <keypad_init+0x98>)
 8000180:	821a      	strh	r2, [r3, #16]
	keypad_gpio.KeypadColumn2_Pin = col_pin[1];
 8000182:	68bb      	ldr	r3, [r7, #8]
 8000184:	885a      	ldrh	r2, [r3, #2]
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <keypad_init+0x98>)
 8000188:	825a      	strh	r2, [r3, #18]
	keypad_gpio.KeypadColumn3_Pin = col_pin[2];
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	889a      	ldrh	r2, [r3, #4]
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <keypad_init+0x98>)
 8000190:	829a      	strh	r2, [r3, #20]
	keypad_gpio.KeypadColumn4_Pin = col_pin[3];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	88da      	ldrh	r2, [r3, #6]
 8000196:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <keypad_init+0x98>)
 8000198:	82da      	strh	r2, [r3, #22]

	keypad_gpio.KeypadRow1_Port = gpio_row[0];
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a11      	ldr	r2, [pc, #68]	; (80001e4 <keypad_init+0x98>)
 80001a0:	6193      	str	r3, [r2, #24]
	keypad_gpio.KeypadRow2_Port = gpio_row[1];
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	685b      	ldr	r3, [r3, #4]
 80001a6:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <keypad_init+0x98>)
 80001a8:	61d3      	str	r3, [r2, #28]
	keypad_gpio.KeypadRow3_Port = gpio_row[2];
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	689b      	ldr	r3, [r3, #8]
 80001ae:	4a0d      	ldr	r2, [pc, #52]	; (80001e4 <keypad_init+0x98>)
 80001b0:	6213      	str	r3, [r2, #32]
	keypad_gpio.KeypadRow4_Port = gpio_row[3];
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	68db      	ldr	r3, [r3, #12]
 80001b6:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <keypad_init+0x98>)
 80001b8:	6253      	str	r3, [r2, #36]	; 0x24

	keypad_gpio.KeypadRow1_Pin = row_pin[0];
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	881a      	ldrh	r2, [r3, #0]
 80001be:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <keypad_init+0x98>)
 80001c0:	851a      	strh	r2, [r3, #40]	; 0x28
	keypad_gpio.KeypadRow2_Pin = row_pin[1];
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	885a      	ldrh	r2, [r3, #2]
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <keypad_init+0x98>)
 80001c8:	855a      	strh	r2, [r3, #42]	; 0x2a
	keypad_gpio.KeypadRow3_Pin = row_pin[2];
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	889a      	ldrh	r2, [r3, #4]
 80001ce:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <keypad_init+0x98>)
 80001d0:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypad_gpio.KeypadRow4_Pin = row_pin[3];
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	88da      	ldrh	r2, [r3, #6]
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <keypad_init+0x98>)
 80001d8:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000060 	.word	0x20000060

080001e8 <HAL_GPIO_EXTI_Callback>:

// EXTI interrupt callback function..
// If external interrupt is generated, the program is branched to here.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	80fb      	strh	r3, [r7, #6]

	// Firstly, we must determine in which column key was pressed.
	if(!keypad.isPressed)
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d135      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0x80>
	{
		keypad.isPressed = 1;
 80001fc:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]

		if(GPIO_Pin == keypad_gpio.KeypadColumn1_Pin )
 8000202:	4b1c      	ldr	r3, [pc, #112]	; (8000274 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000204:	8a1b      	ldrh	r3, [r3, #16]
 8000206:	88fa      	ldrh	r2, [r7, #6]
 8000208:	429a      	cmp	r2, r3
 800020a:	d107      	bne.n	800021c <HAL_GPIO_EXTI_Callback+0x34>
		{
			getPressedKey(keypad.pressedRow, COL1);;
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 800020e:	789b      	ldrb	r3, [r3, #2]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2101      	movs	r1, #1
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f939 	bl	800048c <getPressedKey>
		{
			getPressedKey(keypad.pressedRow, COL4);
		}
	}

}
 800021a:	e025      	b.n	8000268 <HAL_GPIO_EXTI_Callback+0x80>
		else if(GPIO_Pin == keypad_gpio.KeypadColumn2_Pin )
 800021c:	4b15      	ldr	r3, [pc, #84]	; (8000274 <HAL_GPIO_EXTI_Callback+0x8c>)
 800021e:	8a5b      	ldrh	r3, [r3, #18]
 8000220:	88fa      	ldrh	r2, [r7, #6]
 8000222:	429a      	cmp	r2, r3
 8000224:	d107      	bne.n	8000236 <HAL_GPIO_EXTI_Callback+0x4e>
			getPressedKey(keypad.pressedRow, COL2);
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 8000228:	789b      	ldrb	r3, [r3, #2]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f92c 	bl	800048c <getPressedKey>
}
 8000234:	e018      	b.n	8000268 <HAL_GPIO_EXTI_Callback+0x80>
		else if(GPIO_Pin == keypad_gpio.KeypadColumn3_Pin )
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000238:	8a9b      	ldrh	r3, [r3, #20]
 800023a:	88fa      	ldrh	r2, [r7, #6]
 800023c:	429a      	cmp	r2, r3
 800023e:	d107      	bne.n	8000250 <HAL_GPIO_EXTI_Callback+0x68>
			getPressedKey(keypad.pressedRow, COL3);
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2103      	movs	r1, #3
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f91f 	bl	800048c <getPressedKey>
}
 800024e:	e00b      	b.n	8000268 <HAL_GPIO_EXTI_Callback+0x80>
		else if(GPIO_Pin == keypad_gpio.KeypadColumn4_Pin )
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000252:	8adb      	ldrh	r3, [r3, #22]
 8000254:	88fa      	ldrh	r2, [r7, #6]
 8000256:	429a      	cmp	r2, r3
 8000258:	d106      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0x80>
			getPressedKey(keypad.pressedRow, COL4);
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_GPIO_EXTI_Callback+0x88>)
 800025c:	789b      	ldrb	r3, [r3, #2]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2104      	movs	r1, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f912 	bl	800048c <getPressedKey>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000090 	.word	0x20000090
 8000274:	20000060 	.word	0x20000060

08000278 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	scanRows();
 800027c:	f000 f802 	bl	8000284 <scanRows>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <scanRows>:


// All rows set HIGH sequentially so that we can determine which key is pressed.
void scanRows()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	static uint8_t rowsNum = 0;

	// If any key is pressed, scanning of rows will stop.
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 800028a:	4b7d      	ldr	r3, [pc, #500]	; (8000480 <scanRows+0x1fc>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b7c      	ldr	r3, [pc, #496]	; (8000480 <scanRows+0x1fc>)
 8000290:	8a1b      	ldrh	r3, [r3, #16]
 8000292:	4619      	mov	r1, r3
 8000294:	4610      	mov	r0, r2
 8000296:	f000 fe33 	bl	8000f00 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 800029c:	2b00      	cmp	r3, #0
 800029e:	d120      	bne.n	80002e2 <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
 80002a0:	4b77      	ldr	r3, [pc, #476]	; (8000480 <scanRows+0x1fc>)
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	4b76      	ldr	r3, [pc, #472]	; (8000480 <scanRows+0x1fc>)
 80002a6:	8a5b      	ldrh	r3, [r3, #18]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4610      	mov	r0, r2
 80002ac:	f000 fe28 	bl	8000f00 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d115      	bne.n	80002e2 <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 80002b6:	4b72      	ldr	r3, [pc, #456]	; (8000480 <scanRows+0x1fc>)
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	4b71      	ldr	r3, [pc, #452]	; (8000480 <scanRows+0x1fc>)
 80002bc:	8a9b      	ldrh	r3, [r3, #20]
 80002be:	4619      	mov	r1, r3
 80002c0:	4610      	mov	r0, r2
 80002c2:	f000 fe1d 	bl	8000f00 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10a      	bne.n	80002e2 <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn4_Port, keypad_gpio.KeypadColumn4_Pin);
 80002cc:	4b6c      	ldr	r3, [pc, #432]	; (8000480 <scanRows+0x1fc>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	4b6b      	ldr	r3, [pc, #428]	; (8000480 <scanRows+0x1fc>)
 80002d2:	8adb      	ldrh	r3, [r3, #22]
 80002d4:	4619      	mov	r1, r3
 80002d6:	4610      	mov	r0, r2
 80002d8:	f000 fe12 	bl	8000f00 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <scanRows+0x62>
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <scanRows+0x64>
 80002e6:	2300      	movs	r3, #0
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 80002e8:	71fb      	strb	r3, [r7, #7]

	if(!status)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	f040 80c2 	bne.w	8000476 <scanRows+0x1f2>
	{
		keypad.isPressed = 0;
 80002f2:	4b64      	ldr	r3, [pc, #400]	; (8000484 <scanRows+0x200>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]

		switch (rowsNum) {
 80002f8:	4b63      	ldr	r3, [pc, #396]	; (8000488 <scanRows+0x204>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f200 80b3 	bhi.w	8000468 <scanRows+0x1e4>
 8000302:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <scanRows+0x84>)
 8000304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000308:	08000319 	.word	0x08000319
 800030c:	0800036d 	.word	0x0800036d
 8000310:	080003c1 	.word	0x080003c1
 8000314:	08000415 	.word	0x08000415

			case 0:
				keypad.pressedRow = ROW1;
 8000318:	4b5a      	ldr	r3, [pc, #360]	; (8000484 <scanRows+0x200>)
 800031a:	2201      	movs	r2, #1
 800031c:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_SET);
 800031e:	4b58      	ldr	r3, [pc, #352]	; (8000480 <scanRows+0x1fc>)
 8000320:	6998      	ldr	r0, [r3, #24]
 8000322:	4b57      	ldr	r3, [pc, #348]	; (8000480 <scanRows+0x1fc>)
 8000324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	f000 fe00 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 800032e:	4b54      	ldr	r3, [pc, #336]	; (8000480 <scanRows+0x1fc>)
 8000330:	69d8      	ldr	r0, [r3, #28]
 8000332:	4b53      	ldr	r3, [pc, #332]	; (8000480 <scanRows+0x1fc>)
 8000334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	f000 fdf8 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 800033e:	4b50      	ldr	r3, [pc, #320]	; (8000480 <scanRows+0x1fc>)
 8000340:	6a18      	ldr	r0, [r3, #32]
 8000342:	4b4f      	ldr	r3, [pc, #316]	; (8000480 <scanRows+0x1fc>)
 8000344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	f000 fdf0 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 800034e:	4b4c      	ldr	r3, [pc, #304]	; (8000480 <scanRows+0x1fc>)
 8000350:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000352:	4b4b      	ldr	r3, [pc, #300]	; (8000480 <scanRows+0x1fc>)
 8000354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000356:	2200      	movs	r2, #0
 8000358:	4619      	mov	r1, r3
 800035a:	f000 fde8 	bl	8000f2e <HAL_GPIO_WritePin>
				rowsNum++;
 800035e:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <scanRows+0x204>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b48      	ldr	r3, [pc, #288]	; (8000488 <scanRows+0x204>)
 8000368:	701a      	strb	r2, [r3, #0]
				break;
 800036a:	e07d      	b.n	8000468 <scanRows+0x1e4>

			case 1:
				keypad.pressedRow = ROW2;
 800036c:	4b45      	ldr	r3, [pc, #276]	; (8000484 <scanRows+0x200>)
 800036e:	2202      	movs	r2, #2
 8000370:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 8000372:	4b43      	ldr	r3, [pc, #268]	; (8000480 <scanRows+0x1fc>)
 8000374:	6998      	ldr	r0, [r3, #24]
 8000376:	4b42      	ldr	r3, [pc, #264]	; (8000480 <scanRows+0x1fc>)
 8000378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	f000 fdd6 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_SET);
 8000382:	4b3f      	ldr	r3, [pc, #252]	; (8000480 <scanRows+0x1fc>)
 8000384:	69d8      	ldr	r0, [r3, #28]
 8000386:	4b3e      	ldr	r3, [pc, #248]	; (8000480 <scanRows+0x1fc>)
 8000388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800038a:	2201      	movs	r2, #1
 800038c:	4619      	mov	r1, r3
 800038e:	f000 fdce 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 8000392:	4b3b      	ldr	r3, [pc, #236]	; (8000480 <scanRows+0x1fc>)
 8000394:	6a18      	ldr	r0, [r3, #32]
 8000396:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <scanRows+0x1fc>)
 8000398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fdc6 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 80003a2:	4b37      	ldr	r3, [pc, #220]	; (8000480 <scanRows+0x1fc>)
 80003a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <scanRows+0x1fc>)
 80003a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80003aa:	2200      	movs	r2, #0
 80003ac:	4619      	mov	r1, r3
 80003ae:	f000 fdbe 	bl	8000f2e <HAL_GPIO_WritePin>
				rowsNum++;
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <scanRows+0x204>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4b33      	ldr	r3, [pc, #204]	; (8000488 <scanRows+0x204>)
 80003bc:	701a      	strb	r2, [r3, #0]
				break;
 80003be:	e053      	b.n	8000468 <scanRows+0x1e4>

			case 2:
				keypad.pressedRow = ROW3;
 80003c0:	4b30      	ldr	r3, [pc, #192]	; (8000484 <scanRows+0x200>)
 80003c2:	2203      	movs	r2, #3
 80003c4:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 80003c6:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <scanRows+0x1fc>)
 80003c8:	6998      	ldr	r0, [r3, #24]
 80003ca:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <scanRows+0x1fc>)
 80003cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80003ce:	2200      	movs	r2, #0
 80003d0:	4619      	mov	r1, r3
 80003d2:	f000 fdac 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <scanRows+0x1fc>)
 80003d8:	69d8      	ldr	r0, [r3, #28]
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <scanRows+0x1fc>)
 80003dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f000 fda4 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_SET);
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <scanRows+0x1fc>)
 80003e8:	6a18      	ldr	r0, [r3, #32]
 80003ea:	4b25      	ldr	r3, [pc, #148]	; (8000480 <scanRows+0x1fc>)
 80003ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	f000 fd9c 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <scanRows+0x1fc>)
 80003f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <scanRows+0x1fc>)
 80003fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	f000 fd94 	bl	8000f2e <HAL_GPIO_WritePin>
				rowsNum++;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <scanRows+0x204>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <scanRows+0x204>)
 8000410:	701a      	strb	r2, [r3, #0]
				break;
 8000412:	e029      	b.n	8000468 <scanRows+0x1e4>

			case 3:
				keypad.pressedRow = ROW4;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <scanRows+0x200>)
 8000416:	2204      	movs	r2, #4
 8000418:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 800041a:	4b19      	ldr	r3, [pc, #100]	; (8000480 <scanRows+0x1fc>)
 800041c:	6998      	ldr	r0, [r3, #24]
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <scanRows+0x1fc>)
 8000420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	f000 fd82 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <scanRows+0x1fc>)
 800042c:	69d8      	ldr	r0, [r3, #28]
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <scanRows+0x1fc>)
 8000430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	f000 fd7a 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <scanRows+0x1fc>)
 800043c:	6a18      	ldr	r0, [r3, #32]
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <scanRows+0x1fc>)
 8000440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	f000 fd72 	bl	8000f2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_SET);
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <scanRows+0x1fc>)
 800044c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <scanRows+0x1fc>)
 8000450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000452:	2201      	movs	r2, #1
 8000454:	4619      	mov	r1, r3
 8000456:	f000 fd6a 	bl	8000f2e <HAL_GPIO_WritePin>
				rowsNum++;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <scanRows+0x204>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <scanRows+0x204>)
 8000464:	701a      	strb	r2, [r3, #0]
				break;
 8000466:	bf00      	nop

		}

		rowsNum = rowsNum % KEYPAD_ROW_SIZE;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <scanRows+0x204>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	f003 0303 	and.w	r3, r3, #3
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <scanRows+0x204>)
 8000474:	701a      	strb	r2, [r3, #0]
	}

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000060 	.word	0x20000060
 8000484:	20000090 	.word	0x20000090
 8000488:	20000058 	.word	0x20000058

0800048c <getPressedKey>:

// After the row and column are determined, we can find which key was pressed.
void getPressedKey(uint8_t row, uint8_t col)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	460a      	mov	r2, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]
	if(col == COL1)
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d121      	bne.n	80004e6 <getPressedKey+0x5a>
	{
		switch (row) {
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	2b03      	cmp	r3, #3
 80004a8:	f200 8088 	bhi.w	80005bc <getPressedKey+0x130>
 80004ac:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <getPressedKey+0x28>)
 80004ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b2:	bf00      	nop
 80004b4:	080004c5 	.word	0x080004c5
 80004b8:	080004cd 	.word	0x080004cd
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004dd 	.word	0x080004dd

			case ROW1:
			{
				keypad.keyPressed = '1';
 80004c4:	4b40      	ldr	r3, [pc, #256]	; (80005c8 <getPressedKey+0x13c>)
 80004c6:	2231      	movs	r2, #49	; 0x31
 80004c8:	705a      	strb	r2, [r3, #1]
				break;
 80004ca:	e077      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '4';
 80004cc:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <getPressedKey+0x13c>)
 80004ce:	2234      	movs	r2, #52	; 0x34
 80004d0:	705a      	strb	r2, [r3, #1]
				break;
 80004d2:	e073      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '7';
 80004d4:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <getPressedKey+0x13c>)
 80004d6:	2237      	movs	r2, #55	; 0x37
 80004d8:	705a      	strb	r2, [r3, #1]
				break;
 80004da:	e06f      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '*';
 80004dc:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <getPressedKey+0x13c>)
 80004de:	222a      	movs	r2, #42	; 0x2a
 80004e0:	705a      	strb	r2, [r3, #1]
				break;
 80004e2:	bf00      	nop
 80004e4:	e06a      	b.n	80005bc <getPressedKey+0x130>
			}

		}
	} /* if(col == COL1) */

	else if(col == COL2)
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d120      	bne.n	800052e <getPressedKey+0xa2>
	{
		switch (row) {
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d863      	bhi.n	80005bc <getPressedKey+0x130>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <getPressedKey+0x70>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	0800050d 	.word	0x0800050d
 8000500:	08000515 	.word	0x08000515
 8000504:	0800051d 	.word	0x0800051d
 8000508:	08000525 	.word	0x08000525

			case ROW1:
			{
				keypad.keyPressed = '2';
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <getPressedKey+0x13c>)
 800050e:	2232      	movs	r2, #50	; 0x32
 8000510:	705a      	strb	r2, [r3, #1]
				break;
 8000512:	e053      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '5';
 8000514:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <getPressedKey+0x13c>)
 8000516:	2235      	movs	r2, #53	; 0x35
 8000518:	705a      	strb	r2, [r3, #1]
				break;
 800051a:	e04f      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '8';
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <getPressedKey+0x13c>)
 800051e:	2238      	movs	r2, #56	; 0x38
 8000520:	705a      	strb	r2, [r3, #1]
				break;
 8000522:	e04b      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '0';
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <getPressedKey+0x13c>)
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	705a      	strb	r2, [r3, #1]
				break;
 800052a:	bf00      	nop
 800052c:	e046      	b.n	80005bc <getPressedKey+0x130>
			}

		}
	} /* else if(col == COL2) */

	else if(col == COL3)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d120      	bne.n	8000576 <getPressedKey+0xea>
	{
		switch (row) {
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	3b01      	subs	r3, #1
 8000538:	2b03      	cmp	r3, #3
 800053a:	d83f      	bhi.n	80005bc <getPressedKey+0x130>
 800053c:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <getPressedKey+0xb8>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	08000555 	.word	0x08000555
 8000548:	0800055d 	.word	0x0800055d
 800054c:	08000565 	.word	0x08000565
 8000550:	0800056d 	.word	0x0800056d

			case ROW1:
			{
				keypad.keyPressed = '3';
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <getPressedKey+0x13c>)
 8000556:	2233      	movs	r2, #51	; 0x33
 8000558:	705a      	strb	r2, [r3, #1]
				break;
 800055a:	e02f      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '6';
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <getPressedKey+0x13c>)
 800055e:	2236      	movs	r2, #54	; 0x36
 8000560:	705a      	strb	r2, [r3, #1]
				break;
 8000562:	e02b      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '9';
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <getPressedKey+0x13c>)
 8000566:	2239      	movs	r2, #57	; 0x39
 8000568:	705a      	strb	r2, [r3, #1]
				break;
 800056a:	e027      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '#';
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <getPressedKey+0x13c>)
 800056e:	2223      	movs	r2, #35	; 0x23
 8000570:	705a      	strb	r2, [r3, #1]
				break;
 8000572:	bf00      	nop
 8000574:	e022      	b.n	80005bc <getPressedKey+0x130>

		}

	} /* else if(col == COL3) */

	else if(col == COL4)
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d11f      	bne.n	80005bc <getPressedKey+0x130>
	{
		switch (row) {
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	3b01      	subs	r3, #1
 8000580:	2b03      	cmp	r3, #3
 8000582:	d81b      	bhi.n	80005bc <getPressedKey+0x130>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <getPressedKey+0x100>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005a5 	.word	0x080005a5
 8000594:	080005ad 	.word	0x080005ad
 8000598:	080005b5 	.word	0x080005b5

			case ROW1:
			{
				keypad.keyPressed = 'A';
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <getPressedKey+0x13c>)
 800059e:	2241      	movs	r2, #65	; 0x41
 80005a0:	705a      	strb	r2, [r3, #1]
				break;
 80005a2:	e00b      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = 'B';
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <getPressedKey+0x13c>)
 80005a6:	2242      	movs	r2, #66	; 0x42
 80005a8:	705a      	strb	r2, [r3, #1]
				break;
 80005aa:	e007      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = 'C';
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <getPressedKey+0x13c>)
 80005ae:	2243      	movs	r2, #67	; 0x43
 80005b0:	705a      	strb	r2, [r3, #1]
				break;
 80005b2:	e003      	b.n	80005bc <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = 'D';
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <getPressedKey+0x13c>)
 80005b6:	2244      	movs	r2, #68	; 0x44
 80005b8:	705a      	strb	r2, [r3, #1]
				break;
 80005ba:	bf00      	nop
			}

		}
	} /* else if(col == COL4) */

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000090 	.word	0x20000090

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 f9ca 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f812 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f856 	bl	8000688 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  keypad_init(ColumnPort, ColumnPin, RowPort, RowPin);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <main+0x20>)
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <main+0x24>)
 80005e0:	4904      	ldr	r1, [pc, #16]	; (80005f4 <main+0x28>)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <main+0x2c>)
 80005e4:	f7ff fdb2 	bl	800014c <keypad_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x1c>
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028
 80005f0:	20000018 	.word	0x20000018
 80005f4:	20000010 	.word	0x20000010
 80005f8:	20000000 	.word	0x20000000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f8ce 	bl	80017ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800063a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fca3 	bl	8000f90 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000650:	f000 f8a2 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff0e 	bl	8001490 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800067a:	f000 f88d 	bl	8000798 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3740      	adds	r7, #64	; 0x40
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_GPIO_Init+0xfc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a38      	ldr	r2, [pc, #224]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xfc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000702:	4821      	ldr	r0, [pc, #132]	; (8000788 <MX_GPIO_Init+0x100>)
 8000704:	f000 fc13 	bl	8000f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_GPIO_Init+0x104>)
 8000710:	f000 fc0d 	bl	8000f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000722:	2301      	movs	r3, #1
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0x100>)
 800072e:	f000 fa8d 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL4_Pin COL3_Pin COL2_Pin COL1_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL3_Pin|COL2_Pin|COL1_Pin;
 8000732:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0x108>)
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_GPIO_Init+0x10c>)
 8000748:	f000 fa80 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW4_Pin ROW3_Pin ROW2_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin;
 800074c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800075a:	2301      	movs	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_GPIO_Init+0x104>)
 8000766:	f000 fa71 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2028      	movs	r0, #40	; 0x28
 8000770:	f000 fa2f 	bl	8000bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f000 fa48 	bl	8000c0a <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40011000 	.word	0x40011000
 800078c:	40010800 	.word	0x40010800
 8000790:	10110000 	.word	0x10110000
 8000794:	40010c00 	.word	0x40010c00

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_MspInit+0x5c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x5c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x60>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_MspInit+0x60>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40010000 	.word	0x40010000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <HardFault_Handler+0x4>

0800081a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <BusFault_Handler+0x4>

08000826 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	msTick++;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <SysTick_Handler+0x34>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <SysTick_Handler+0x34>)
 800085c:	6013      	str	r3, [r2, #0]

	if(!(msTick % 50))
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <SysTick_Handler+0x34>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <SysTick_Handler+0x38>)
 8000864:	fba3 1302 	umull	r1, r3, r3, r2
 8000868:	091b      	lsrs	r3, r3, #4
 800086a:	2132      	movs	r1, #50	; 0x32
 800086c:	fb01 f303 	mul.w	r3, r1, r3
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <SysTick_Handler+0x2a>
	{
		HAL_SYSTICK_IRQHandler();
 8000876:	f000 f9e2 	bl	8000c3e <HAL_SYSTICK_IRQHandler>
	}


  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800087a:	f000 f8b7 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000005c 	.word	0x2000005c
 8000888:	51eb851f 	.word	0x51eb851f

0800088c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000890:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000894:	f000 fb64 	bl	8000f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000898:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800089c:	f000 fb60 	bl	8000f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80008a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008a4:	f000 fb5c 	bl	8000f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80008a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008ac:	f000 fb58 	bl	8000f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <SystemInit+0x5c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <SystemInit+0x5c>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <SystemInit+0x5c>)
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4911      	ldr	r1, [pc, #68]	; (8000910 <SystemInit+0x5c>)
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x60>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <SystemInit+0x5c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <SystemInit+0x5c>)
 80008d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <SystemInit+0x5c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <SystemInit+0x5c>)
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <SystemInit+0x5c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <SystemInit+0x5c>)
 80008f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SystemInit+0x5c>)
 80008fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SystemInit+0x64>)
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif 
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000
 8000914:	f8ff0000 	.word	0xf8ff0000
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800091c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000942:	f7ff ffb7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 ff0d 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094a:	f7ff fe3f 	bl	80005cc <main>
  bx lr
 800094e:	4770      	bx	lr
  ldr r3, =_sidata
 8000950:	08001800 	.word	0x08001800
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000958:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 800095c:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8000960:	20000098 	.word	0x20000098

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f91f 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff ff0e 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / HAL_TICK_FREQ_DEFAULT)) > 0U)
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_InitTick+0x4c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <HAL_InitTick+0x50>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	099b      	lsrs	r3, r3, #6
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f93c 	bl	8000c26 <HAL_SYSTICK_Config>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_InitTick+0x24>
  {
    return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e00e      	b.n	80009d6 <HAL_InitTick+0x42>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d80a      	bhi.n	80009d4 <HAL_InitTick+0x40>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	f000 f904 	bl	8000bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_InitTick+0x54>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	e000      	b.n	80009d6 <HAL_InitTick+0x42>
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000030 	.word	0x20000030
 80009e4:	10624dd3 	.word	0x10624dd3
 80009e8:	20000034 	.word	0x20000034

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	20000094 	.word	0x20000094

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000094 	.word	0x20000094

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff90 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff2d 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff42 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff35 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c42:	f7ff fb19 	bl	8000278 <HAL_SYSTICK_Callback>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	e127      	b.n	8000eb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c60:	2201      	movs	r2, #1
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8116 	bne.w	8000eaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d034      	beq.n	8000cf0 <HAL_GPIO_Init+0xa4>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d80d      	bhi.n	8000ca6 <HAL_GPIO_Init+0x5a>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d02b      	beq.n	8000ce6 <HAL_GPIO_Init+0x9a>
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d804      	bhi.n	8000c9c <HAL_GPIO_Init+0x50>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d031      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d01c      	beq.n	8000cd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e048      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d043      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
 8000ca0:	2b11      	cmp	r3, #17
 8000ca2:	d01b      	beq.n	8000cdc <HAL_GPIO_Init+0x90>
          break;
 8000ca4:	e043      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ca6:	4a89      	ldr	r2, [pc, #548]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d026      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cac:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d806      	bhi.n	8000cc0 <HAL_GPIO_Init+0x74>
 8000cb2:	4a87      	ldr	r2, [pc, #540]	; (8000ed0 <HAL_GPIO_Init+0x284>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d020      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cb8:	4a86      	ldr	r2, [pc, #536]	; (8000ed4 <HAL_GPIO_Init+0x288>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01d      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cbe:	e036      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cc0:	4a85      	ldr	r2, [pc, #532]	; (8000ed8 <HAL_GPIO_Init+0x28c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cc6:	4a85      	ldr	r2, [pc, #532]	; (8000edc <HAL_GPIO_Init+0x290>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d016      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000ccc:	4a84      	ldr	r2, [pc, #528]	; (8000ee0 <HAL_GPIO_Init+0x294>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cd2:	e02c      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e028      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e023      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	3308      	adds	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e01e      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e019      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e012      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	611a      	str	r2, [r3, #16]
          break;
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	615a      	str	r2, [r3, #20]
          break;
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d801      	bhi.n	8000d38 <HAL_GPIO_Init+0xec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	e001      	b.n	8000d3c <HAL_GPIO_Init+0xf0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d802      	bhi.n	8000d4a <HAL_GPIO_Init+0xfe>
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x104>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	210f      	movs	r1, #15
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	401a      	ands	r2, r3
 8000d62:	6a39      	ldr	r1, [r7, #32]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 8096 	beq.w	8000eaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d96:	4a54      	ldr	r2, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x19e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x19a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x196>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x192>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e004      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dea:	2300      	movs	r3, #0
 8000dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dee:	f002 0203 	and.w	r2, r2, #3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfc:	493a      	ldr	r1, [pc, #232]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4938      	ldr	r1, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	492e      	ldr	r1, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4929      	ldr	r1, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	4924      	ldr	r1, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	608b      	str	r3, [r1, #8]
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	491f      	ldr	r1, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	491a      	ldr	r1, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f aed0 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	; 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	10120000 	.word	0x10120000
 8000ed8:	10310000 	.word	0x10310000
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10220000 	.word	0x10220000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3e:	787b      	ldrb	r3, [r7, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f932 	bl	80001e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e26c      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb0:	4b92      	ldr	r3, [pc, #584]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d00c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fbc:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d112      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d10b      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d06c      	beq.n	80010bc <HAL_RCC_OscConfig+0x12c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d168      	bne.n	80010bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e246      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x76>
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e02e      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b78      	ldr	r3, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a77      	ldr	r2, [pc, #476]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0xbc>
 8001032:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a71      	ldr	r2, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6e      	ldr	r2, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a67      	ldr	r2, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcd0 	bl	8000a10 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fccc 	bl	8000a10 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1fa      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xe4>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fcbc 	bl	8000a10 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fcb8 	bl	8000a10 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1e6      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x10c>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1ba      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fc71 	bl	8000a10 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc6d 	bl	8000a10 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e19b      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4927      	ldr	r1, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fc50 	bl	8000a10 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc4c 	bl	8000a10 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e17a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03a      	beq.n	8001214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc30 	bl	8000a10 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc2c 	bl	8000a10 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e15a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 faa8 	bl	8001728 <RCC_Delay>
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fc16 	bl	8000a10 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	e00f      	b.n	8001208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc12 	bl	8000a10 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d908      	bls.n	8001208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e140      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000
 8001204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e9      	bne.n	80011e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a6 	beq.w	800136e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b97      	ldr	r3, [pc, #604]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10d      	bne.n	800124e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b94      	ldr	r3, [pc, #592]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a93      	ldr	r2, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d118      	bne.n	800128c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001266:	f7ff fbd3 	bl	8000a10 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126e:	f7ff fbcf 	bl	8000a10 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0fd      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e02d      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x334>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	e01c      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x356>
 80012cc:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a69      	ldr	r2, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	e00b      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a66      	ldr	r2, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb83 	bl	8000a10 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fb7f 	bl	8000a10 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0ab      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ee      	beq.n	800130e <HAL_RCC_OscConfig+0x37e>
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb6d 	bl	8000a10 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fb69 	bl	8000a10 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e095      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8081 	beq.w	800147a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d061      	beq.n	8001448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d146      	bne.n	800141a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb3d 	bl	8000a10 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb39 	bl	8000a10 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e067      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d108      	bne.n	80013d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	492d      	ldr	r1, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a19      	ldr	r1, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	430b      	orrs	r3, r1
 80013e6:	4927      	ldr	r1, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb0d 	bl	8000a10 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb09 	bl	8000a10 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e037      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
 8001418:	e02f      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff faf6 	bl	8000a10 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff faf2 	bl	8000a10 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e020      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x498>
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	429a      	cmp	r2, r3
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	42420060 	.word	0x42420060

08001490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0d0      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d910      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	4965      	ldr	r1, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e073      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06b      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa46 	bl	8000a10 <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fa42 	bl	8000a10 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e053      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d210      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f821 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001622:	4601      	mov	r1, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	fa21 f303 	lsr.w	r3, r1, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1cc>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f9a8 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000
 8001654:	40021000 	.word	0x40021000
 8001658:	080017e8 	.word	0x080017e8
 800165c:	20000030 	.word	0x20000030
 8001660:	20000034 	.word	0x20000034

08001664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b490      	push	{r4, r7}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb0>)
 800166c:	1d3c      	adds	r4, r7, #4
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b04      	cmp	r3, #4
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x40>
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x46>
 80016a2:	e02d      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a6:	623b      	str	r3, [r7, #32]
      break;
 80016a8:	e02d      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b6:	4413      	add	r3, r2
 80016b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c5b      	lsrs	r3, r3, #17
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d6:	4413      	add	r3, r2
 80016d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e2:	fb02 f203 	mul.w	r2, r2, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e004      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	623b      	str	r3, [r7, #32]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001702:	623b      	str	r3, [r7, #32]
      break;
 8001704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001706:	6a3b      	ldr	r3, [r7, #32]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc90      	pop	{r4, r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	080017d4 	.word	0x080017d4
 8001718:	080017e4 	.word	0x080017e4
 800171c:	40021000 	.word	0x40021000
 8001720:	007a1200 	.word	0x007a1200
 8001724:	003d0900 	.word	0x003d0900

08001728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <RCC_Delay+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <RCC_Delay+0x38>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001744:	bf00      	nop
  }
  while (Delay --);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	60fa      	str	r2, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <RCC_Delay+0x1c>
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000030 	.word	0x20000030
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <__libc_init_array>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	2500      	movs	r5, #0
 8001768:	4e0c      	ldr	r6, [pc, #48]	; (800179c <__libc_init_array+0x38>)
 800176a:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__libc_init_array+0x3c>)
 800176c:	1ba4      	subs	r4, r4, r6
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	42a5      	cmp	r5, r4
 8001772:	d109      	bne.n	8001788 <__libc_init_array+0x24>
 8001774:	f000 f822 	bl	80017bc <_init>
 8001778:	2500      	movs	r5, #0
 800177a:	4e0a      	ldr	r6, [pc, #40]	; (80017a4 <__libc_init_array+0x40>)
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <__libc_init_array+0x44>)
 800177e:	1ba4      	subs	r4, r4, r6
 8001780:	10a4      	asrs	r4, r4, #2
 8001782:	42a5      	cmp	r5, r4
 8001784:	d105      	bne.n	8001792 <__libc_init_array+0x2e>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800178c:	4798      	blx	r3
 800178e:	3501      	adds	r5, #1
 8001790:	e7ee      	b.n	8001770 <__libc_init_array+0xc>
 8001792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001796:	4798      	blx	r3
 8001798:	3501      	adds	r5, #1
 800179a:	e7f2      	b.n	8001782 <__libc_init_array+0x1e>
 800179c:	080017f8 	.word	0x080017f8
 80017a0:	080017f8 	.word	0x080017f8
 80017a4:	080017f8 	.word	0x080017f8
 80017a8:	080017fc 	.word	0x080017fc

080017ac <memset>:
 80017ac:	4603      	mov	r3, r0
 80017ae:	4402      	add	r2, r0
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d100      	bne.n	80017b6 <memset+0xa>
 80017b4:	4770      	bx	lr
 80017b6:	f803 1b01 	strb.w	r1, [r3], #1
 80017ba:	e7f9      	b.n	80017b0 <memset+0x4>

080017bc <_init>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr

080017c8 <_fini>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr
