
STM32_4x4_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001800  08001800  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08001800  08001800  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001800  08001800  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000003c  08001844  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001844  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003601  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000eba  00000000  00000000  00023666  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  00024520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000370  00000000  00000000  00024928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001260e  00000000  00000000  00024c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000040db  00000000  00000000  000372a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006400a  00000000  00000000  0003b381  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f38b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de0  00000000  00000000  0009f408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017c4 	.word	0x080017c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080017c4 	.word	0x080017c4

0800014c <EXTI15_10_IRQHandler>:
volatile uint32_t msTick;

KeypadGPIO_TypeDef keypad_gpio;

void EXTI15_10_IRQHandler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(!keypad.isPressed)
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b2db      	uxtb	r3, r3
 8000156:	2b00      	cmp	r3, #0
 8000158:	d14e      	bne.n	80001f8 <EXTI15_10_IRQHandler+0xac>
	{
		keypad.isPressed = 1;
 800015a:	4b28      	ldr	r3, [pc, #160]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 800015c:	2201      	movs	r2, #1
 800015e:	701a      	strb	r2, [r3, #0]

		if (__HAL_GPIO_EXTI_GET_IT(keypad_gpio.KeypadColumn1_Pin) != 0x00U)
 8000160:	4b27      	ldr	r3, [pc, #156]	; (8000200 <EXTI15_10_IRQHandler+0xb4>)
 8000162:	695b      	ldr	r3, [r3, #20]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 8000166:	8a12      	ldrh	r2, [r2, #16]
 8000168:	4013      	ands	r3, r2
 800016a:	2b00      	cmp	r3, #0
 800016c:	d00b      	beq.n	8000186 <EXTI15_10_IRQHandler+0x3a>
		{
		  getPressedKey(keypad.pressedRow, COL1);
 800016e:	4b23      	ldr	r3, [pc, #140]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 8000170:	789b      	ldrb	r3, [r3, #2]
 8000172:	b2db      	uxtb	r3, r3
 8000174:	2101      	movs	r1, #1
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f9b6 	bl	80004e8 <getPressedKey>
		  HAL_GPIO_EXTI_IRQHandler(keypad_gpio.KeypadColumn1_Pin);
 800017c:	4b21      	ldr	r3, [pc, #132]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 800017e:	8a1b      	ldrh	r3, [r3, #16]
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fee7 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
		}

		if (__HAL_GPIO_EXTI_GET_IT(keypad_gpio.KeypadColumn2_Pin) != 0x00U)
 8000186:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <EXTI15_10_IRQHandler+0xb4>)
 8000188:	695b      	ldr	r3, [r3, #20]
 800018a:	4a1e      	ldr	r2, [pc, #120]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 800018c:	8a52      	ldrh	r2, [r2, #18]
 800018e:	4013      	ands	r3, r2
 8000190:	2b00      	cmp	r3, #0
 8000192:	d00b      	beq.n	80001ac <EXTI15_10_IRQHandler+0x60>
		{
		  getPressedKey(keypad.pressedRow, COL2);
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	b2db      	uxtb	r3, r3
 800019a:	2102      	movs	r1, #2
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f9a3 	bl	80004e8 <getPressedKey>
		  HAL_GPIO_EXTI_IRQHandler(keypad_gpio.KeypadColumn2_Pin);
 80001a2:	4b18      	ldr	r3, [pc, #96]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 80001a4:	8a5b      	ldrh	r3, [r3, #18]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fed4 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
		}

		if (__HAL_GPIO_EXTI_GET_IT(keypad_gpio.KeypadColumn3_Pin) != 0x00U)
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <EXTI15_10_IRQHandler+0xb4>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a14      	ldr	r2, [pc, #80]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 80001b2:	8a92      	ldrh	r2, [r2, #20]
 80001b4:	4013      	ands	r3, r2
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d00b      	beq.n	80001d2 <EXTI15_10_IRQHandler+0x86>
		{
		  getPressedKey(keypad.pressedRow, COL3);
 80001ba:	4b10      	ldr	r3, [pc, #64]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	2103      	movs	r1, #3
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f990 	bl	80004e8 <getPressedKey>
		  HAL_GPIO_EXTI_IRQHandler(keypad_gpio.KeypadColumn3_Pin);
 80001c8:	4b0e      	ldr	r3, [pc, #56]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 80001ca:	8a9b      	ldrh	r3, [r3, #20]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 fec1 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
		}

		if (__HAL_GPIO_EXTI_GET_IT(keypad_gpio.KeypadColumn4_Pin) != 0x00U)
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <EXTI15_10_IRQHandler+0xb4>)
 80001d4:	695b      	ldr	r3, [r3, #20]
 80001d6:	4a0b      	ldr	r2, [pc, #44]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 80001d8:	8ad2      	ldrh	r2, [r2, #22]
 80001da:	4013      	ands	r3, r2
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d00b      	beq.n	80001f8 <EXTI15_10_IRQHandler+0xac>
		{
		  getPressedKey(keypad.pressedRow, COL4);
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <EXTI15_10_IRQHandler+0xb0>)
 80001e2:	789b      	ldrb	r3, [r3, #2]
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	2104      	movs	r1, #4
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f97d 	bl	80004e8 <getPressedKey>
		  HAL_GPIO_EXTI_IRQHandler(keypad_gpio.KeypadColumn4_Pin);
 80001ee:	4b05      	ldr	r3, [pc, #20]	; (8000204 <EXTI15_10_IRQHandler+0xb8>)
 80001f0:	8adb      	ldrh	r3, [r3, #22]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 feae 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000090 	.word	0x20000090
 8000200:	40010400 	.word	0x40010400
 8000204:	20000060 	.word	0x20000060

08000208 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	msTick++;
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SysTick_Handler+0x34>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <SysTick_Handler+0x34>)
 8000214:	6013      	str	r3, [r2, #0]

	if(!(msTick % 20))
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <SysTick_Handler+0x34>)
 8000218:	6819      	ldr	r1, [r3, #0]
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <SysTick_Handler+0x38>)
 800021c:	fba3 2301 	umull	r2, r3, r3, r1
 8000220:	091a      	lsrs	r2, r3, #4
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	1aca      	subs	r2, r1, r3
 800022c:	2a00      	cmp	r2, #0
 800022e:	d101      	bne.n	8000234 <SysTick_Handler+0x2c>
	{
		scanRows();
 8000230:	f000 f856 	bl	80002e0 <scanRows>
	}

  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000234:	f000 fbda 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000005c 	.word	0x2000005c
 8000240:	cccccccd 	.word	0xcccccccd

08000244 <keypad_init>:

// Initialize Keypad columns/rows GPIO Ports and GPIO pins.
void keypad_init(GPIO_TypeDef** gpio_col, uint16_t* col_pin, GPIO_TypeDef** gpio_row, uint16_t* row_pin )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
 8000250:	603b      	str	r3, [r7, #0]
	keypad_gpio.KeypadColumn1_Port = gpio_col[0];
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <keypad_init+0x98>)
 8000258:	6013      	str	r3, [r2, #0]
	keypad_gpio.KeypadColumn2_Port = gpio_col[1];
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <keypad_init+0x98>)
 8000260:	6053      	str	r3, [r2, #4]
	keypad_gpio.KeypadColumn3_Port = gpio_col[2];
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <keypad_init+0x98>)
 8000268:	6093      	str	r3, [r2, #8]
	keypad_gpio.KeypadColumn4_Port = gpio_col[3];
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <keypad_init+0x98>)
 8000270:	60d3      	str	r3, [r2, #12]

	keypad_gpio.KeypadColumn1_Pin = col_pin[0];
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	881a      	ldrh	r2, [r3, #0]
 8000276:	4b19      	ldr	r3, [pc, #100]	; (80002dc <keypad_init+0x98>)
 8000278:	821a      	strh	r2, [r3, #16]
	keypad_gpio.KeypadColumn2_Pin = col_pin[1];
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	885a      	ldrh	r2, [r3, #2]
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <keypad_init+0x98>)
 8000280:	825a      	strh	r2, [r3, #18]
	keypad_gpio.KeypadColumn3_Pin = col_pin[2];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	889a      	ldrh	r2, [r3, #4]
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <keypad_init+0x98>)
 8000288:	829a      	strh	r2, [r3, #20]
	keypad_gpio.KeypadColumn4_Pin = col_pin[3];
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	88da      	ldrh	r2, [r3, #6]
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <keypad_init+0x98>)
 8000290:	82da      	strh	r2, [r3, #22]

	keypad_gpio.KeypadRow1_Port = gpio_row[0];
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a11      	ldr	r2, [pc, #68]	; (80002dc <keypad_init+0x98>)
 8000298:	6193      	str	r3, [r2, #24]
	keypad_gpio.KeypadRow2_Port = gpio_row[1];
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <keypad_init+0x98>)
 80002a0:	61d3      	str	r3, [r2, #28]
	keypad_gpio.KeypadRow3_Port = gpio_row[2];
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <keypad_init+0x98>)
 80002a8:	6213      	str	r3, [r2, #32]
	keypad_gpio.KeypadRow4_Port = gpio_row[3];
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <keypad_init+0x98>)
 80002b0:	6253      	str	r3, [r2, #36]	; 0x24

	keypad_gpio.KeypadRow1_Pin = row_pin[0];
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	881a      	ldrh	r2, [r3, #0]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <keypad_init+0x98>)
 80002b8:	851a      	strh	r2, [r3, #40]	; 0x28
	keypad_gpio.KeypadRow2_Pin = row_pin[1];
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	885a      	ldrh	r2, [r3, #2]
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <keypad_init+0x98>)
 80002c0:	855a      	strh	r2, [r3, #42]	; 0x2a
	keypad_gpio.KeypadRow3_Pin = row_pin[2];
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	889a      	ldrh	r2, [r3, #4]
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <keypad_init+0x98>)
 80002c8:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypad_gpio.KeypadRow4_Pin = row_pin[3];
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	88da      	ldrh	r2, [r3, #6]
 80002ce:	4b03      	ldr	r3, [pc, #12]	; (80002dc <keypad_init+0x98>)
 80002d0:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000060 	.word	0x20000060

080002e0 <scanRows>:

// All rows set HIGH sequentially so that we can determine which key is pressed.
void scanRows()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	static uint8_t rowsNum = 0;

	// If any key is pressed, scanning of rows will stop.
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 80002e6:	4b7d      	ldr	r3, [pc, #500]	; (80004dc <scanRows+0x1fc>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b7c      	ldr	r3, [pc, #496]	; (80004dc <scanRows+0x1fc>)
 80002ec:	8a1b      	ldrh	r3, [r3, #16]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4610      	mov	r0, r2
 80002f2:	f000 fdff 	bl	8000ef4 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d120      	bne.n	800033e <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
 80002fc:	4b77      	ldr	r3, [pc, #476]	; (80004dc <scanRows+0x1fc>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	4b76      	ldr	r3, [pc, #472]	; (80004dc <scanRows+0x1fc>)
 8000302:	8a5b      	ldrh	r3, [r3, #18]
 8000304:	4619      	mov	r1, r3
 8000306:	4610      	mov	r0, r2
 8000308:	f000 fdf4 	bl	8000ef4 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 800030e:	2b00      	cmp	r3, #0
 8000310:	d115      	bne.n	800033e <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 8000312:	4b72      	ldr	r3, [pc, #456]	; (80004dc <scanRows+0x1fc>)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b71      	ldr	r3, [pc, #452]	; (80004dc <scanRows+0x1fc>)
 8000318:	8a9b      	ldrh	r3, [r3, #20]
 800031a:	4619      	mov	r1, r3
 800031c:	4610      	mov	r0, r2
 800031e:	f000 fde9 	bl	8000ef4 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn2_Port, keypad_gpio.KeypadColumn2_Pin) ||
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10a      	bne.n	800033e <scanRows+0x5e>
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn4_Port, keypad_gpio.KeypadColumn4_Pin);
 8000328:	4b6c      	ldr	r3, [pc, #432]	; (80004dc <scanRows+0x1fc>)
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	4b6b      	ldr	r3, [pc, #428]	; (80004dc <scanRows+0x1fc>)
 800032e:	8adb      	ldrh	r3, [r3, #22]
 8000330:	4619      	mov	r1, r3
 8000332:	4610      	mov	r0, r2
 8000334:	f000 fdde 	bl	8000ef4 <HAL_GPIO_ReadPin>
 8000338:	4603      	mov	r3, r0
					 HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn3_Port, keypad_gpio.KeypadColumn3_Pin) ||
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <scanRows+0x62>
 800033e:	2301      	movs	r3, #1
 8000340:	e000      	b.n	8000344 <scanRows+0x64>
 8000342:	2300      	movs	r3, #0
	uint8_t status = HAL_GPIO_ReadPin(keypad_gpio.KeypadColumn1_Port, keypad_gpio.KeypadColumn1_Pin) ||
 8000344:	71fb      	strb	r3, [r7, #7]

	if(!status)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	f040 80c2 	bne.w	80004d2 <scanRows+0x1f2>
	{
		keypad.isPressed = 0;
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <scanRows+0x200>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]

		switch (rowsNum) {
 8000354:	4b63      	ldr	r3, [pc, #396]	; (80004e4 <scanRows+0x204>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	f200 80b3 	bhi.w	80004c4 <scanRows+0x1e4>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <scanRows+0x84>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000375 	.word	0x08000375
 8000368:	080003c9 	.word	0x080003c9
 800036c:	0800041d 	.word	0x0800041d
 8000370:	08000471 	.word	0x08000471

			case 0:
				keypad.pressedRow = ROW1;
 8000374:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <scanRows+0x200>)
 8000376:	2201      	movs	r2, #1
 8000378:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_SET);
 800037a:	4b58      	ldr	r3, [pc, #352]	; (80004dc <scanRows+0x1fc>)
 800037c:	6998      	ldr	r0, [r3, #24]
 800037e:	4b57      	ldr	r3, [pc, #348]	; (80004dc <scanRows+0x1fc>)
 8000380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	f000 fdcc 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 800038a:	4b54      	ldr	r3, [pc, #336]	; (80004dc <scanRows+0x1fc>)
 800038c:	69d8      	ldr	r0, [r3, #28]
 800038e:	4b53      	ldr	r3, [pc, #332]	; (80004dc <scanRows+0x1fc>)
 8000390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000392:	2200      	movs	r2, #0
 8000394:	4619      	mov	r1, r3
 8000396:	f000 fdc4 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 800039a:	4b50      	ldr	r3, [pc, #320]	; (80004dc <scanRows+0x1fc>)
 800039c:	6a18      	ldr	r0, [r3, #32]
 800039e:	4b4f      	ldr	r3, [pc, #316]	; (80004dc <scanRows+0x1fc>)
 80003a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	f000 fdbc 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 80003aa:	4b4c      	ldr	r3, [pc, #304]	; (80004dc <scanRows+0x1fc>)
 80003ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80003ae:	4b4b      	ldr	r3, [pc, #300]	; (80004dc <scanRows+0x1fc>)
 80003b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	f000 fdb4 	bl	8000f22 <HAL_GPIO_WritePin>
				rowsNum++;
 80003ba:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <scanRows+0x204>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b48      	ldr	r3, [pc, #288]	; (80004e4 <scanRows+0x204>)
 80003c4:	701a      	strb	r2, [r3, #0]
				break;
 80003c6:	e07d      	b.n	80004c4 <scanRows+0x1e4>

			case 1:
				keypad.pressedRow = ROW2;
 80003c8:	4b45      	ldr	r3, [pc, #276]	; (80004e0 <scanRows+0x200>)
 80003ca:	2202      	movs	r2, #2
 80003cc:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 80003ce:	4b43      	ldr	r3, [pc, #268]	; (80004dc <scanRows+0x1fc>)
 80003d0:	6998      	ldr	r0, [r3, #24]
 80003d2:	4b42      	ldr	r3, [pc, #264]	; (80004dc <scanRows+0x1fc>)
 80003d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80003d6:	2200      	movs	r2, #0
 80003d8:	4619      	mov	r1, r3
 80003da:	f000 fda2 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_SET);
 80003de:	4b3f      	ldr	r3, [pc, #252]	; (80004dc <scanRows+0x1fc>)
 80003e0:	69d8      	ldr	r0, [r3, #28]
 80003e2:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <scanRows+0x1fc>)
 80003e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	f000 fd9a 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 80003ee:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <scanRows+0x1fc>)
 80003f0:	6a18      	ldr	r0, [r3, #32]
 80003f2:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <scanRows+0x1fc>)
 80003f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80003f6:	2200      	movs	r2, #0
 80003f8:	4619      	mov	r1, r3
 80003fa:	f000 fd92 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 80003fe:	4b37      	ldr	r3, [pc, #220]	; (80004dc <scanRows+0x1fc>)
 8000400:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000402:	4b36      	ldr	r3, [pc, #216]	; (80004dc <scanRows+0x1fc>)
 8000404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	f000 fd8a 	bl	8000f22 <HAL_GPIO_WritePin>
				rowsNum++;
 800040e:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <scanRows+0x204>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <scanRows+0x204>)
 8000418:	701a      	strb	r2, [r3, #0]
				break;
 800041a:	e053      	b.n	80004c4 <scanRows+0x1e4>

			case 2:
				keypad.pressedRow = ROW3;
 800041c:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <scanRows+0x200>)
 800041e:	2203      	movs	r2, #3
 8000420:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <scanRows+0x1fc>)
 8000424:	6998      	ldr	r0, [r3, #24]
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <scanRows+0x1fc>)
 8000428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800042a:	2200      	movs	r2, #0
 800042c:	4619      	mov	r1, r3
 800042e:	f000 fd78 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 8000432:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <scanRows+0x1fc>)
 8000434:	69d8      	ldr	r0, [r3, #28]
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <scanRows+0x1fc>)
 8000438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800043a:	2200      	movs	r2, #0
 800043c:	4619      	mov	r1, r3
 800043e:	f000 fd70 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_SET);
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <scanRows+0x1fc>)
 8000444:	6a18      	ldr	r0, [r3, #32]
 8000446:	4b25      	ldr	r3, [pc, #148]	; (80004dc <scanRows+0x1fc>)
 8000448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	f000 fd68 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_RESET);
 8000452:	4b22      	ldr	r3, [pc, #136]	; (80004dc <scanRows+0x1fc>)
 8000454:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000456:	4b21      	ldr	r3, [pc, #132]	; (80004dc <scanRows+0x1fc>)
 8000458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	f000 fd60 	bl	8000f22 <HAL_GPIO_WritePin>
				rowsNum++;
 8000462:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <scanRows+0x204>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	3301      	adds	r3, #1
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <scanRows+0x204>)
 800046c:	701a      	strb	r2, [r3, #0]
				break;
 800046e:	e029      	b.n	80004c4 <scanRows+0x1e4>

			case 3:
				keypad.pressedRow = ROW4;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <scanRows+0x200>)
 8000472:	2204      	movs	r2, #4
 8000474:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow1_Port, keypad_gpio.KeypadRow1_Pin, GPIO_PIN_RESET);
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <scanRows+0x1fc>)
 8000478:	6998      	ldr	r0, [r3, #24]
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <scanRows+0x1fc>)
 800047c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800047e:	2200      	movs	r2, #0
 8000480:	4619      	mov	r1, r3
 8000482:	f000 fd4e 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow2_Port, keypad_gpio.KeypadRow2_Pin, GPIO_PIN_RESET);
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <scanRows+0x1fc>)
 8000488:	69d8      	ldr	r0, [r3, #28]
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <scanRows+0x1fc>)
 800048c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800048e:	2200      	movs	r2, #0
 8000490:	4619      	mov	r1, r3
 8000492:	f000 fd46 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow3_Port, keypad_gpio.KeypadRow3_Pin, GPIO_PIN_RESET);
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <scanRows+0x1fc>)
 8000498:	6a18      	ldr	r0, [r3, #32]
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <scanRows+0x1fc>)
 800049c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800049e:	2200      	movs	r2, #0
 80004a0:	4619      	mov	r1, r3
 80004a2:	f000 fd3e 	bl	8000f22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(keypad_gpio.KeypadRow4_Port, keypad_gpio.KeypadRow4_Pin, GPIO_PIN_SET);
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <scanRows+0x1fc>)
 80004a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <scanRows+0x1fc>)
 80004ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80004ae:	2201      	movs	r2, #1
 80004b0:	4619      	mov	r1, r3
 80004b2:	f000 fd36 	bl	8000f22 <HAL_GPIO_WritePin>
				rowsNum++;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <scanRows+0x204>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <scanRows+0x204>)
 80004c0:	701a      	strb	r2, [r3, #0]
				break;
 80004c2:	bf00      	nop

		}

		rowsNum = rowsNum % KEYPAD_ROW_SIZE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <scanRows+0x204>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <scanRows+0x204>)
 80004d0:	701a      	strb	r2, [r3, #0]
	}

}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000060 	.word	0x20000060
 80004e0:	20000090 	.word	0x20000090
 80004e4:	20000058 	.word	0x20000058

080004e8 <getPressedKey>:

// After the row and column are determined, we can find which key was pressed.
void getPressedKey(uint8_t row, uint8_t col)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	if(col == COL1)
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d121      	bne.n	8000542 <getPressedKey+0x5a>
	{
		switch (row) {
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	3b01      	subs	r3, #1
 8000502:	2b03      	cmp	r3, #3
 8000504:	f200 8088 	bhi.w	8000618 <getPressedKey+0x130>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <getPressedKey+0x28>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000521 	.word	0x08000521
 8000514:	08000529 	.word	0x08000529
 8000518:	08000531 	.word	0x08000531
 800051c:	08000539 	.word	0x08000539

			case ROW1:
			{
				keypad.keyPressed = '1';
 8000520:	4b40      	ldr	r3, [pc, #256]	; (8000624 <getPressedKey+0x13c>)
 8000522:	2231      	movs	r2, #49	; 0x31
 8000524:	705a      	strb	r2, [r3, #1]
				break;
 8000526:	e077      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '4';
 8000528:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <getPressedKey+0x13c>)
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	705a      	strb	r2, [r3, #1]
				break;
 800052e:	e073      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '7';
 8000530:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <getPressedKey+0x13c>)
 8000532:	2237      	movs	r2, #55	; 0x37
 8000534:	705a      	strb	r2, [r3, #1]
				break;
 8000536:	e06f      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '*';
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <getPressedKey+0x13c>)
 800053a:	222a      	movs	r2, #42	; 0x2a
 800053c:	705a      	strb	r2, [r3, #1]
				break;
 800053e:	bf00      	nop
 8000540:	e06a      	b.n	8000618 <getPressedKey+0x130>
			}

		}
	} /* if(col == COL1) */

	else if(col == COL2)
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d120      	bne.n	800058a <getPressedKey+0xa2>
	{
		switch (row) {
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	3b01      	subs	r3, #1
 800054c:	2b03      	cmp	r3, #3
 800054e:	d863      	bhi.n	8000618 <getPressedKey+0x130>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <getPressedKey+0x70>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000569 	.word	0x08000569
 800055c:	08000571 	.word	0x08000571
 8000560:	08000579 	.word	0x08000579
 8000564:	08000581 	.word	0x08000581

			case ROW1:
			{
				keypad.keyPressed = '2';
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <getPressedKey+0x13c>)
 800056a:	2232      	movs	r2, #50	; 0x32
 800056c:	705a      	strb	r2, [r3, #1]
				break;
 800056e:	e053      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '5';
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <getPressedKey+0x13c>)
 8000572:	2235      	movs	r2, #53	; 0x35
 8000574:	705a      	strb	r2, [r3, #1]
				break;
 8000576:	e04f      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '8';
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <getPressedKey+0x13c>)
 800057a:	2238      	movs	r2, #56	; 0x38
 800057c:	705a      	strb	r2, [r3, #1]
				break;
 800057e:	e04b      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '0';
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <getPressedKey+0x13c>)
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	705a      	strb	r2, [r3, #1]
				break;
 8000586:	bf00      	nop
 8000588:	e046      	b.n	8000618 <getPressedKey+0x130>
			}

		}
	} /* else if(col == COL2) */

	else if(col == COL3)
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d120      	bne.n	80005d2 <getPressedKey+0xea>
	{
		switch (row) {
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	3b01      	subs	r3, #1
 8000594:	2b03      	cmp	r3, #3
 8000596:	d83f      	bhi.n	8000618 <getPressedKey+0x130>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <getPressedKey+0xb8>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b1 	.word	0x080005b1
 80005a4:	080005b9 	.word	0x080005b9
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	080005c9 	.word	0x080005c9

			case ROW1:
			{
				keypad.keyPressed = '3';
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <getPressedKey+0x13c>)
 80005b2:	2233      	movs	r2, #51	; 0x33
 80005b4:	705a      	strb	r2, [r3, #1]
				break;
 80005b6:	e02f      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = '6';
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <getPressedKey+0x13c>)
 80005ba:	2236      	movs	r2, #54	; 0x36
 80005bc:	705a      	strb	r2, [r3, #1]
				break;
 80005be:	e02b      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = '9';
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <getPressedKey+0x13c>)
 80005c2:	2239      	movs	r2, #57	; 0x39
 80005c4:	705a      	strb	r2, [r3, #1]
				break;
 80005c6:	e027      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = '#';
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <getPressedKey+0x13c>)
 80005ca:	2223      	movs	r2, #35	; 0x23
 80005cc:	705a      	strb	r2, [r3, #1]
				break;
 80005ce:	bf00      	nop
 80005d0:	e022      	b.n	8000618 <getPressedKey+0x130>

		}

	} /* else if(col == COL3) */

	else if(col == COL4)
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d11f      	bne.n	8000618 <getPressedKey+0x130>
	{
		switch (row) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3b01      	subs	r3, #1
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d81b      	bhi.n	8000618 <getPressedKey+0x130>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <getPressedKey+0x100>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	08000601 	.word	0x08000601
 80005f0:	08000609 	.word	0x08000609
 80005f4:	08000611 	.word	0x08000611

			case ROW1:
			{
				keypad.keyPressed = 'A';
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <getPressedKey+0x13c>)
 80005fa:	2241      	movs	r2, #65	; 0x41
 80005fc:	705a      	strb	r2, [r3, #1]
				break;
 80005fe:	e00b      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW2:
			{
				keypad.keyPressed = 'B';
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <getPressedKey+0x13c>)
 8000602:	2242      	movs	r2, #66	; 0x42
 8000604:	705a      	strb	r2, [r3, #1]
				break;
 8000606:	e007      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW3:
			{
				keypad.keyPressed = 'C';
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <getPressedKey+0x13c>)
 800060a:	2243      	movs	r2, #67	; 0x43
 800060c:	705a      	strb	r2, [r3, #1]
				break;
 800060e:	e003      	b.n	8000618 <getPressedKey+0x130>
			}

			case ROW4:
			{
				keypad.keyPressed = 'D';
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <getPressedKey+0x13c>)
 8000612:	2244      	movs	r2, #68	; 0x44
 8000614:	705a      	strb	r2, [r3, #1]
				break;
 8000616:	bf00      	nop
			}

		}
	} /* else if(col == COL4) */

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000090 	.word	0x20000090

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 f998 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f812 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f856 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  keypad_init(ColumnPort, ColumnPin, RowPort, RowPin);
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <main+0x20>)
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <main+0x24>)
 800063c:	4904      	ldr	r1, [pc, #16]	; (8000650 <main+0x28>)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <main+0x2c>)
 8000640:	f7ff fe00 	bl	8000244 <keypad_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x1c>
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	20000018 	.word	0x20000018
 8000650:	20000010 	.word	0x20000010
 8000654:	20000000 	.word	0x20000000

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f8a4 	bl	80017b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000696:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fc79 	bl	8000f98 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ac:	f000 f8a2 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fee4 	bl	8001498 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f88d 	bl	80007f4 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3740      	adds	r7, #64	; 0x40
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <MX_GPIO_Init+0xfc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a38      	ldr	r2, [pc, #224]	; (80007e0 <MX_GPIO_Init+0xfc>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_GPIO_Init+0xfc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xfc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <MX_GPIO_Init+0xfc>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xfc>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xfc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_GPIO_Init+0x100>)
 8000760:	f000 fbdf 	bl	8000f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800076a:	481f      	ldr	r0, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x104>)
 800076c:	f000 fbd9 	bl	8000f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800077e:	2301      	movs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x100>)
 800078a:	f000 fa59 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL4_Pin COL3_Pin COL2_Pin COL1_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL3_Pin|COL2_Pin|COL1_Pin;
 800078e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0x108>)
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <MX_GPIO_Init+0x10c>)
 80007a4:	f000 fa4c 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW4_Pin ROW3_Pin ROW2_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin;
 80007a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_GPIO_Init+0x104>)
 80007c2:	f000 fa3d 	bl	8000c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2028      	movs	r0, #40	; 0x28
 80007cc:	f000 fa01 	bl	8000bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d0:	2028      	movs	r0, #40	; 0x28
 80007d2:	f000 fa1a 	bl	8000c0a <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40011000 	.word	0x40011000
 80007e8:	40010800 	.word	0x40010800
 80007ec:	10110000 	.word	0x10110000
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_MspInit+0x5c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x5c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_MspInit+0x60>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_MspInit+0x60>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <HardFault_Handler+0x4>

08000876 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <BusFault_Handler+0x4>

08000882 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <SystemInit+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <SystemInit+0x5c>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <SystemInit+0x5c>)
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4911      	ldr	r1, [pc, #68]	; (8000908 <SystemInit+0x5c>)
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <SystemInit+0x60>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <SystemInit+0x5c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <SystemInit+0x5c>)
 80008ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <SystemInit+0x5c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SystemInit+0x5c>)
 80008de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <SystemInit+0x5c>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <SystemInit+0x5c>)
 80008ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SystemInit+0x5c>)
 80008f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SystemInit+0x64>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	f8ff0000 	.word	0xf8ff0000
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000930:	f842 3b04 	str.w	r3, [r2], #4

08000934 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff ffb7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f000 ff15 	bl	800176c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fe71 	bl	8000628 <main>
  bx lr
 8000946:	4770      	bx	lr
  ldr r3, =_sidata
 8000948:	08001808 	.word	0x08001808
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000950:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 8000954:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8000958:	20000098 	.word	0x20000098

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f923 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff ff40 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f93b 	bl	8000c26 <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f903 	bl	8000bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000030 	.word	0x20000030
 80009e4:	20000038 	.word	0x20000038
 80009e8:	20000034 	.word	0x20000034

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	20000094 	.word	0x20000094

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000094 	.word	0x20000094

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff90 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff2d 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff42 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff35 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e127      	b.n	8000ea4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8116 	bne.w	8000e9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d034      	beq.n	8000ce4 <HAL_GPIO_Init+0xa4>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d80d      	bhi.n	8000c9a <HAL_GPIO_Init+0x5a>
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d02b      	beq.n	8000cda <HAL_GPIO_Init+0x9a>
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d804      	bhi.n	8000c90 <HAL_GPIO_Init+0x50>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d031      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d01c      	beq.n	8000cc8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8e:	e048      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d043      	beq.n	8000d1c <HAL_GPIO_Init+0xdc>
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d01b      	beq.n	8000cd0 <HAL_GPIO_Init+0x90>
          break;
 8000c98:	e043      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c9a:	4a89      	ldr	r2, [pc, #548]	; (8000ec0 <HAL_GPIO_Init+0x280>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d026      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000ca0:	4a87      	ldr	r2, [pc, #540]	; (8000ec0 <HAL_GPIO_Init+0x280>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d806      	bhi.n	8000cb4 <HAL_GPIO_Init+0x74>
 8000ca6:	4a87      	ldr	r2, [pc, #540]	; (8000ec4 <HAL_GPIO_Init+0x284>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d020      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cac:	4a86      	ldr	r2, [pc, #536]	; (8000ec8 <HAL_GPIO_Init+0x288>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01d      	beq.n	8000cee <HAL_GPIO_Init+0xae>
          break;
 8000cb2:	e036      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cb4:	4a85      	ldr	r2, [pc, #532]	; (8000ecc <HAL_GPIO_Init+0x28c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d019      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cba:	4a85      	ldr	r2, [pc, #532]	; (8000ed0 <HAL_GPIO_Init+0x290>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d016      	beq.n	8000cee <HAL_GPIO_Init+0xae>
 8000cc0:	4a84      	ldr	r2, [pc, #528]	; (8000ed4 <HAL_GPIO_Init+0x294>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xae>
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e028      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e023      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01e      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e019      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e012      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e008      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d801      	bhi.n	8000d2c <HAL_GPIO_Init+0xec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	e001      	b.n	8000d30 <HAL_GPIO_Init+0xf0>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3304      	adds	r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2bff      	cmp	r3, #255	; 0xff
 8000d36:	d802      	bhi.n	8000d3e <HAL_GPIO_Init+0xfe>
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x104>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3b08      	subs	r3, #8
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	401a      	ands	r2, r3
 8000d56:	6a39      	ldr	r1, [r7, #32]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 8096 	beq.w	8000e9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_GPIO_Init+0x298>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8a:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x29c>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4013      	ands	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x19e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x19a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x196>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x192>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x1a0>
 8000dde:	2300      	movs	r3, #0
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df0:	493a      	ldr	r1, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x29c>)
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4933      	ldr	r1, [pc, #204]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	492e      	ldr	r1, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
 8000e3e:	e006      	b.n	8000e4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	4924      	ldr	r1, [pc, #144]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	608b      	str	r3, [r1, #8]
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	491f      	ldr	r1, [pc, #124]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	491a      	ldr	r1, [pc, #104]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60cb      	str	r3, [r1, #12]
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4915      	ldr	r1, [pc, #84]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f47f aed0 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	372c      	adds	r7, #44	; 0x2c
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	10210000 	.word	0x10210000
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	10310000 	.word	0x10310000
 8000ed0:	10320000 	.word	0x10320000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e001      	b.n	8000f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f32:	787b      	ldrb	r3, [r7, #1]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f3e:	e003      	b.n	8000f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	041a      	lsls	r2, r3, #16
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	611a      	str	r2, [r3, #16]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f806 	bl	8000f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e26c      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8087 	beq.w	80010c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb8:	4b92      	ldr	r3, [pc, #584]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00c      	beq.n	8000fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc4:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d112      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
 8000fd0:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4b89      	ldr	r3, [pc, #548]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d06c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x12c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d168      	bne.n	80010c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e246      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x76>
 8001000:	4b80      	ldr	r3, [pc, #512]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7f      	ldr	r2, [pc, #508]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e02e      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b78      	ldr	r3, [pc, #480]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a77      	ldr	r2, [pc, #476]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xbc>
 800103a:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a71      	ldr	r2, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6e      	ldr	r2, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001054:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6a      	ldr	r2, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a67      	ldr	r2, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fccc 	bl	8000a10 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcc8 	bl	8000a10 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1fa      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe4>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fcb8 	bl	8000a10 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcb4 	bl	8000a10 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1e6      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x10c>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010de:	4b49      	ldr	r3, [pc, #292]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d11c      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1ba      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4939      	ldr	r1, [pc, #228]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e03a      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fc6d 	bl	8000a10 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fc69 	bl	8000a10 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e19b      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4927      	ldr	r1, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fc4c 	bl	8000a10 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fc48 	bl	8000a10 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e17a      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03a      	beq.n	800121c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d019      	beq.n	80011e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_RCC_OscConfig+0x274>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fc2c 	bl	8000a10 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc28 	bl	8000a10 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e15a      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 faa8 	bl	8001730 <RCC_Delay>
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_RCC_OscConfig+0x274>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc12 	bl	8000a10 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ee:	e00f      	b.n	8001210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc0e 	bl	8000a10 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d908      	bls.n	8001210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e140      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	42420000 	.word	0x42420000
 800120c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	4b9e      	ldr	r3, [pc, #632]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e9      	bne.n	80011f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a6 	beq.w	8001376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b94      	ldr	r3, [pc, #592]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a93      	ldr	r2, [pc, #588]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b91      	ldr	r3, [pc, #580]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	4b8e      	ldr	r3, [pc, #568]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001262:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8a      	ldr	r2, [pc, #552]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbcf 	bl	8000a10 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff fbcb 	bl	8000a10 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0fd      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x312>
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a7a      	ldr	r2, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	4b73      	ldr	r3, [pc, #460]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a72      	ldr	r2, [pc, #456]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x356>
 80012d4:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a66      	ldr	r2, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb7f 	bl	8000a10 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb7b 	bl	8000a10 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0ab      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x37e>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fb69 	bl	8000a10 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fb65 	bl	8000a10 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e095      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b48      	ldr	r3, [pc, #288]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a47      	ldr	r2, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8081 	beq.w	8001482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d061      	beq.n	8001450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d146      	bne.n	8001422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb39 	bl	8000a10 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fb35 	bl	8000a10 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e067      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	492d      	ldr	r1, [pc, #180]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a19      	ldr	r1, [r3, #32]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	430b      	orrs	r3, r1
 80013ee:	4927      	ldr	r1, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb09 	bl	8000a10 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb05 	bl	8000a10 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e037      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x46a>
 8001420:	e02f      	b.n	8001482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff faf2 	bl	8000a10 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff faee 	bl	8000a10 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e020      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x498>
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	429a      	cmp	r2, r3
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	42420060 	.word	0x42420060

08001498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0d0      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d910      	bls.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4965      	ldr	r1, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d040      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e073      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06b      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4936      	ldr	r1, [pc, #216]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fa42 	bl	8000a10 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fa3e 	bl	8000a10 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e053      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d210      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4601      	mov	r1, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	fa21 f303 	lsr.w	r3, r1, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1cc>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f9a0 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000
 800165c:	40021000 	.word	0x40021000
 8001660:	080017f0 	.word	0x080017f0
 8001664:	20000030 	.word	0x20000030
 8001668:	20000034 	.word	0x20000034

0800166c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b490      	push	{r4, r7}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001674:	1d3c      	adds	r4, r7, #4
 8001676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x40>
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x46>
 80016aa:	e02d      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ae:	623b      	str	r3, [r7, #32]
      break;
 80016b0:	e02d      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	0c9b      	lsrs	r3, r3, #18
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016be:	4413      	add	r3, r2
 80016c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0c5b      	lsrs	r3, r3, #17
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016de:	4413      	add	r3, r2
 80016e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ea:	fb02 f203 	mul.w	r2, r2, r3
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
 80016f6:	e004      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_RCC_GetSysClockFreq+0xc0>)
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	623b      	str	r3, [r7, #32]
      break;
 8001706:	e002      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_RCC_GetSysClockFreq+0xbc>)
 800170a:	623b      	str	r3, [r7, #32]
      break;
 800170c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170e:	6a3b      	ldr	r3, [r7, #32]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bc90      	pop	{r4, r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	080017dc 	.word	0x080017dc
 8001720:	080017ec 	.word	0x080017ec
 8001724:	40021000 	.word	0x40021000
 8001728:	007a1200 	.word	0x007a1200
 800172c:	003d0900 	.word	0x003d0900

08001730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <RCC_Delay+0x34>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <RCC_Delay+0x38>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0a5b      	lsrs	r3, r3, #9
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800174c:	bf00      	nop
  }
  while (Delay --);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	60fa      	str	r2, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <RCC_Delay+0x1c>
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000030 	.word	0x20000030
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <__libc_init_array>:
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	2500      	movs	r5, #0
 8001770:	4e0c      	ldr	r6, [pc, #48]	; (80017a4 <__libc_init_array+0x38>)
 8001772:	4c0d      	ldr	r4, [pc, #52]	; (80017a8 <__libc_init_array+0x3c>)
 8001774:	1ba4      	subs	r4, r4, r6
 8001776:	10a4      	asrs	r4, r4, #2
 8001778:	42a5      	cmp	r5, r4
 800177a:	d109      	bne.n	8001790 <__libc_init_array+0x24>
 800177c:	f000 f822 	bl	80017c4 <_init>
 8001780:	2500      	movs	r5, #0
 8001782:	4e0a      	ldr	r6, [pc, #40]	; (80017ac <__libc_init_array+0x40>)
 8001784:	4c0a      	ldr	r4, [pc, #40]	; (80017b0 <__libc_init_array+0x44>)
 8001786:	1ba4      	subs	r4, r4, r6
 8001788:	10a4      	asrs	r4, r4, #2
 800178a:	42a5      	cmp	r5, r4
 800178c:	d105      	bne.n	800179a <__libc_init_array+0x2e>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001794:	4798      	blx	r3
 8001796:	3501      	adds	r5, #1
 8001798:	e7ee      	b.n	8001778 <__libc_init_array+0xc>
 800179a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800179e:	4798      	blx	r3
 80017a0:	3501      	adds	r5, #1
 80017a2:	e7f2      	b.n	800178a <__libc_init_array+0x1e>
 80017a4:	08001800 	.word	0x08001800
 80017a8:	08001800 	.word	0x08001800
 80017ac:	08001800 	.word	0x08001800
 80017b0:	08001804 	.word	0x08001804

080017b4 <memset>:
 80017b4:	4603      	mov	r3, r0
 80017b6:	4402      	add	r2, r0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <memset+0xa>
 80017bc:	4770      	bx	lr
 80017be:	f803 1b01 	strb.w	r1, [r3], #1
 80017c2:	e7f9      	b.n	80017b8 <memset+0x4>

080017c4 <_init>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr

080017d0 <_fini>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr
